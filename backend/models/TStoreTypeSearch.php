<?php

namespace app\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\models\TStoreType;
use yii\helpers\ArrayHelper;

/**
 * TStoreTypeSearch represents the model behind the search form about `app\models\TStoreType`.
 */
class TStoreTypeSearch extends TStoreType
{
    public $CELL_ID;
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [[
                'CELL_ID',
                'ID', 'TYPE_NAME', 'TYPE_URL', 'PIC_NAME', 'REMARK'], 'safe'],
            [['SORT'], 'integer'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = TStoreTypeSearch::find()->select('t_store_type.*');

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }
        $query->joinWith('storeTypeCell')->addSelect('t_store_type_cell.CELL_ID');

        $query->where(['t_store_type_cell.CELL_ID' => Utils::authCells()]);

        $query->andFilterWhere(['like', 't_store_type_cell.CELL_ID', $this->CELL_ID]);

        // grid filtering conditions
        $query->andFilterWhere([
            'SORT' => $this->SORT,
        ]);

        $query->andFilterWhere(['like', 'ID', $this->ID])
            ->andFilterWhere(['like', 'TYPE_NAME', $this->TYPE_NAME])
            ->andFilterWhere(['like', 'TYPE_URL', $this->TYPE_URL])
            ->andFilterWhere(['like', 'PIC_NAME', $this->PIC_NAME])
            ->andFilterWhere(['like', 'REMARK', $this->REMARK]);
        return $dataProvider;
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(),[
            'CELL_ID'=>'小区'
        ]) ;// TODO: Change the autogenerated stub
    }

}
